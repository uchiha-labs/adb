// ===== MongoDB Indexing Examples =====

// Sample Collections & Documents
db.students.insertMany([
  { name: "Alice", age: 22, course: "B.Sc", email: "alice@example.com" },
  { name: "Bob", age: 23, course: "B.Tech", email: "bob@example.com" },
  { name: "Asha", age: 21, course: "B.Tech" },
  { name: "Ram", age: 22, course: "B.Sc" },
  { name: "John", age: 20 }, // no email
  { name: "Sam", email: "sam@example.com" }
]);

db.sessions.insertOne({
  userId: "abc123",
  createdAt: new Date()
});

db.dynamic.insertOne({
  name: "Kavin",
  meta: {
    topic: "AI",
    views: 100,
    likes: 25
  }
});

// 1. Single Field Index
db.students.createIndex({ name: 1 });

// 2. Compound Index
db.students.createIndex({ course: 1, age: -1 });

// 3. Unique Index (no duplicate emails allowed)
db.students.createIndex({ email: 1 }, { unique: true });

// 4. Text Index (full-text search on 'name' and 'course')
db.students.createIndex({ name: "text", course: "text" });

// 5. TTL Index (expire sessions after 1 hour)
db.sessions.createIndex({ createdAt: 1 }, { expireAfterSeconds: 3600 });

// 6. Wildcard Index (indexes all fields in 'dynamic' collection)
db.dynamic.createIndex({ "$**": 1 });

// 7. Partial Index (only index students in B.Tech course by age)
db.students.createIndex(
  { age: 1 },
  { partialFilterExpression: { course: "B.Tech" } }
);

// 8. Sparse Index (index only documents where 'email' exists)
db.students.createIndex({ email: 1 }, { sparse: true });

// --------------- Sample Queries ------------------

// Query that can use single field index
db.students.find({ name: "Alice" });

// Query that uses compound index
db.students.find({ course: "B.Tech", age: { $gt: 20 } });

// Query that uses text index
db.students.find({ $text: { $search: "B.Tech" } });

// Query to test TTL index (sessions older than 1 hour auto deleted)
// Just insert and wait, no direct query needed.

// Query that uses wildcard index
db.dynamic.find({ "meta.views": { $gt: 50 } });

// Query that uses partial index
db.students.find({ course: "B.Tech", age: 21 });

// Query that uses sparse index
db.students.find({ email: { $exists: true } });

// --------------- Viewing & Dropping Indexes ------------------

// View all indexes on students collection
db.students.getIndexes();

// Drop an index by name, e.g., drop 'name_1'
db.students.dropIndex("name_1");

/* Sample Output:

{ "createdCollectionAutomatically" : false, "numIndexesBefore" : X, "numIndexesAfter" : Y, "ok" : 1 }

Indexes List Example:
[
  { "v": 2, "key": { "_id": 1 }, "name": "_id_" },
  { "v": 2, "key": { "name": 1 }, "name": "name_1" },
  { "v": 2, "key": { "course": 1, "age": -1 }, "name": "course_1_age_-1" },
  { "v": 2, "key": { "email": 1 }, "name": "email_1", "unique": true, "sparse": true },
  { "v": 2, "key": { "name": "text", "course": "text" }, "name": "name_text_course_text" },
  { "v": 2, "key": { "createdAt": 1 }, "name": "createdAt_1", "expireAfterSeconds": 3600 },
  { "v": 2, "key": { "$**": 1 }, "name": "$**_1" },
  { "v": 2, "key": { "age": 1 }, "name": "age_1", "partialFilterExpression": { "course": "B.Tech" } }
]

Find Query Results Example:
{ _id: ObjectId("..."), name: "Alice", age: 22, course: "B.Sc", email: "alice@example.com" }
{ _id: ObjectId("..."), name: "Bob", age: 23, course: "B.Tech", email: "bob@example.com" }
{ _id: ObjectId("..."), name: "Kavin", meta: { topic: "AI", views: 100, likes: 25 } }
{ _id: ObjectId("..."), name: "Sam", email: "sam@example.com" }

*/
